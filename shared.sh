# Common functions for vps creation

exiterr () {
	errmsg="$1"
	ec=1
	[ $# -ge 2 ] && ec=$2
	echo "$errmsg" >&2
	exit $ec
}

echo_and_do () {
echo "$*"
"$@"
}

findemptydev () {
	tail -n +2 /proc/partitions | while read major minor blocks devn; do
		[ -b /dev/$devn ] || continue
		blkid /dev/$devn >/dev/null || echo /dev/$devn
		blkid /dev/$devn >/dev/null || break
	done
}

prepare_disk () {
$MKFS $mkfs_opts -L $volname $disk || exiterr 'Nem sikerult mkfs!'

[ -d $VSERVER_ROOT/$host ] || mkdir $VSERVER_ROOT/$host
[ -d $VSERVER_ROOT/$host ] || exiterr 'Nem sikerult mkdir!'

echo "LABEL=\"${volname}\" $VSERVER_ROOT/$host xfs defaults 0 2" >>/etc/fstab
mount $VSERVER_ROOT/$host
}

prepare_lxcsys () {
cat <<END >$rootfs/etc/inittab
id:3:initdefault:
si::sysinit:/etc/init.d/rcS
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin
1:2345:respawn:/sbin/getty 38400 console
c1:2345:respawn:/sbin/getty 38400 tty1 linux
c2:2345:respawn:/sbin/getty 38400 tty2 linux
c3:2345:respawn:/sbin/getty 38400 tty3 linux
c4:2345:respawn:/sbin/getty 38400 tty4 linux
END

mknod $rootfs/dev/tty1 c 4 1
mknod $rootfs/dev/tty2 c 4 2
mknod $rootfs/dev/tty3 c 4 3
mknod $rootfs/dev/tty4 c 4 4

mkdir -p $rootfs/selinux
echo 0 > $rootfs/selinux/enforce

cat <<END >$VSERVER_ROOT/$host/config
# vpsgen generated config section
lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm

# mounts point
lxc.mount.entry=proc $rootfs/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts $rootfs/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs $rootfs/sys sysfs defaults  0 0
lxc.utsname=$host
END
}

prepare_lxcnet () {
for ni in ${net//,/ } ; do
	echo "lxc.network.${ni%%:*}=${ni#*:}" >>$VSERVER_ROOT/$host/config
done

cat <<END >$rootfs/etc/network/interfaces
# Network configuration file, generated by vpsgen script

auto lo
iface lo inet loopback
END
for ni in ${ifes//,/ } ; do
	case "${ni%%:*}" in
		sdev)
			echo -e "\niface ${ni#*:} inet static" >>$rootfs/etc/network/interfaces
		;;
		autosdev)
			echo -e "\nauto ${ni#*:}" >>$rootfs/etc/network/interfaces
			echo "iface ${ni#*:} inet static" >>$rootfs/etc/network/interfaces
		;;
		*)
			echo -e "\t${ni%%:*} ${ni#*:}" >>$rootfs/etc/network/interfaces
		;;
	esac
done

[ -z "${resolv}" ] || : >$rootfs/etc/resolv.conf
for ri in ${resolv//,/ } ; do
	case "${ri%%:*}" in
		search)
			echo -e "search ${ri#*:}" >>$rootfs/etc/resolv.conf
		;;
		nameserver)
			echo -e "nameserver ${ri#*:}" >>$rootfs/etc/resolv.conf
		;;
	esac
done

cat <<END >$rootfs/etc/hostname
$host
END
}

prepare_lxcis () {
# reconfigure some services
if [ -z "$LANG" ]; then
	chroot $rootfs locale-gen en_US.UTF-8
	chroot $rootfs update-locale LANG=en_US.UTF-8
else
	chroot $rootfs locale-gen $LANG
	chroot $rootfs update-locale LANG=$LANG
fi

# remove pointless services in a container
chroot $rootfs /usr/sbin/update-rc.d -f umountfs remove
chroot $rootfs /usr/sbin/update-rc.d -f hwclock.sh remove
chroot $rootfs /usr/sbin/update-rc.d -f hwclockfirst.sh remove

#echo "root:root" | chroot $rootfs chpasswd
#echo "Root password is 'root', please change !"

echo "deb ${DEBSP_MIRROR:=$DEB_MIRROR} $DEB_DIST $DEB_COMP" >$rootfs/etc/apt/sources.list
echo "deb ${DEBSP_SECMIRROR:=$DEB_SECMIRROR} $DEB_DIST/updates $DEB_COMP" >>$rootfs/etc/apt/sources.list
}

configure_lxcis () {
cat <<END >$rootfs/root/initscript.sh
#!/bin/bash

PATH=/bin:/sbin:/usr/bin:/usr/sbin
ifup -a
apt-get update
#debconf debconf/frontend select Noninteractive
cat <<DC | debconf-set-selections
sysv-rc sysv-rc/convert-legacy boolean true
dash dash/sh boolean true
${LC_GEN:+locales locales/locales_to_be_generated multiselect }${LC_GEN}
DC
rm /etc/timezone
apt-get -y dist-upgrade
echo "$TZ" >/etc/timezone
rm /etc/localtime
dpkg-reconfigure -fnoninteractive tzdata
apt-get install ed
addgroup --system wheel
echo -e '/pam_wheel.so\ns/^# //\nw' | ed /etc/pam.d/su
echo -e '/trust\ns/^# //\nw' | ed /etc/pam.d/su
echo -e '/root\ns/:[^:]*:/::\nw' | ed /etc/shadow
END
}

prepare_users () {
for i in ${users//,/ } ; do
	gecos=${i#*:}
	gecos="${gecos//_/ }"
	login=${i%%:*}
	cp $confdir/keys/$login.pkey $rootfs/root/$login.pkey
	cat <<END >>$rootfs/root/initscript.sh
adduser --disabled-password --gecos "$gecos" $login
install -d -m 700 -o $login -g $login /home/$login/.ssh
install -m 600 -o $login -g $login /root/$login.pkey /home/$login/.ssh/authorized_keys
rm /root/$login.pkey
END
done

for i in ${wheel//,/ } ; do
	echo "adduser $i wheel" >>$rootfs/root/initscript.sh
done

install -d -m 700 -o root -g root $rootfs/root/.ssh
install -m 600 -o root -g root $confdir/keys/$VSBACKUPKEY.pkey $rootfs/root/.ssh/authorized_keys
}
